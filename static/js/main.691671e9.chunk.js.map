{"version":3,"sources":["styles/StyledComponent.js","components/QuizContent.jsx","styles/ReactSelectStyle.js","images/logo.svg","components/Quiz.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuizTitle","styled","h1","FormLabel","p","BtnReset","button","StartButton","QuestionContainer","div","NumContainer","QuestionNum","Question","ChoiceButton","Choice","span","NextQuestion","AnswerCheckContainer","props","correct","CompletedTxtContainer","ResultContainer","ResultText","Score","StatsContainer","Stats","Restart","Loading","QuizContent","useState","questionNumber","setQuestionNumber","score","setScore","answerSubmitted","setAnswerSubmitted","gameOver","setGameOver","isCorrect","setIsCorrect","data","length","he","decode","question","answers","map","el","index","onClick","answer","correct_answer","console","log","handleAnswer","disabled","style","marginTop","setDiff","setCategory","setQuizData","setStartGame","customStyle","control","baseStyle","state","borderRadius","borderColor","selectProps","error","padding","placeholder","menu","menuList","option","margin","Quiz","category","diff","quizData","startGame","showError","setShowError","showLoading","setShowLoading","src","logo","alt","onSubmit","ev","preventDefault","axios","get","value","then","res","results","type","difficulty","shuffle","incorrect_answers","defaultValue","onChange","options","label","styles","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.691671e9.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const QuizTitle = styled.h1`\r\n\ttext-align: center;\r\n\tmargin-bottom: 2rem;\r\n`\r\n\r\nexport const FormLabel = styled.p`\r\n\tmargin: 1.5rem 0 1rem;\r\n`\r\n\r\n// reset button default style\r\nexport const BtnReset = styled.button`\r\n\tall: unset;\r\n`\r\n\r\n// extend button reset\r\nexport const StartButton = styled(BtnReset)`\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\ttext-align: center;\r\n\tmargin-top: 1.5rem;\r\n\tpadding: 1rem 0;\r\n\t/* border: 1px solid black; */\r\n\tborder-radius: 1.75rem;\r\n\tfont-size: 1rem;\r\n\tfont-weight: 700;\r\n\tletter-spacing: 1px;\r\n\tbackground: #4E90FE;\r\n\t/* box-shadow: 2px 6px 12px rgba(138, 183, 255, 0.54); */\r\n\tcolor: white;\r\n`\r\n\r\n// styled component for QuizContent\r\nexport const QuestionContainer = styled.div`\r\n\t/* border: 1px solid rgba(0, 0, 0, .24); */\r\n\tborder-radius: 1rem;\r\n\tpadding: 1rem;\r\n\tmargin-bottom: 1rem;\r\n\tbackground: #4E90FE;\r\n\tcolor: white;\r\n`\r\n\r\nexport const NumContainer = styled.div`\r\n\twidth: 100%;\r\n\t/* border: 1px solid black; */\r\n\tmargin-bottom: 1rem;\r\n`\r\n\r\nexport const QuestionNum = styled.p`\r\n\tfont-weight: 700;\r\n`\r\n\r\nexport const Question = styled.p`\r\n\tline-height: 161.8%;\r\n\tfont-weight: 700;\r\n\tletter-spacing: .5px;\r\n`\r\n\r\nexport const ChoiceButton = styled(BtnReset)`\r\n\twidth: 100%;\r\n\tborder: 1px solid rgba(0, 0, 0, .16);\r\n\tborder-radius: .5rem;\r\n\tpadding: 1rem 0;\r\n\tmargin-bottom: .5rem;\r\n\tcolor: rgba(0, 0, 0, .54);\r\n\r\n\t&:hover:enabled {\r\n\t\tborder: 1px solid rgba(0, 0, 0, .54);\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t&:disabled {\r\n\t\tbackground-color: rgba(0, 0, 0, .06)\r\n\t}\r\n`\r\n\r\nexport const Choice = styled.span`\r\n\tmargin-left: 1rem;\r\n`\r\n\r\nexport const NextQuestion = styled(BtnReset)`\r\n\t/* width: 50%; */\r\n\t/* border: 1px solid black; */\r\n\tborder-radius: .5rem;\r\n\tmargin-top: 1rem;\r\n\tpadding: 1rem;\r\n\tbackground: #4E90FE;\r\n\tcolor: white;\r\n\tfont-weight: 700;\r\n`\r\n\r\nexport const AnswerCheckContainer = styled(QuestionContainer)`\r\n\tbackground: ${props => props.correct ? '#B6FFBD' : '#FFDBDB'};\r\n\tcolor: ${props => props.correct ? '#2FA306' : '#E85252'};\r\n\ttext-align: center;\r\n\t/* border: .5px solid #03B014; */\r\n\tborder: ${props => props.correct ? '.5px solid #03B014' : '.5px solid #B00303' };\r\n\tfont-weight: 700;\r\n`\r\n\r\nexport const CompletedTxtContainer = styled.div`\r\n\t/* border: 1px solid black; */\r\n\tborder-radius: 1.5rem;\r\n\twidth: 50%;\r\n\ttext-align: center;\r\n\tmargin: 0 auto 1rem;\r\n\tpadding: .5rem 0;\r\n\tcolor: #4E90FE;\r\n\tfont-weight: 700;\r\n`\r\n\r\nexport const ResultContainer = styled.div`\r\n\t/* border: 1px solid black; */\r\n\tborder-radius: 100%;\r\n\tbox-shadow: 3px 6px 18px rgba(0, 0, 0, 0.1);\r\n\tbackground: #4E90FE;\r\n\tcolor: white;\r\n\twidth: 8rem;\r\n\theight: 8rem;\r\n\tmargin: 0 auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`\r\n\r\nexport const ResultText = styled.p`\r\n\tcolor: rgba(255, 255, 255, .8);\r\n`\r\n\r\nexport const Score = styled.p`\r\n\tfont-size: 2.5em;\r\n\tfont-weight: 700;\r\n`\r\n\r\nexport const StatsContainer = styled.div`\r\n\tmargin-top: 2rem;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr;\r\n\tcolumn-gap: 1rem;\r\n`\r\n\r\nexport const Stats = styled(AnswerCheckContainer)`\r\n\ttext-align: left;\r\n`\r\n\r\nexport const Restart = styled(NextQuestion)`\r\n\twidth: 100%;\r\n\tpadding-right: 0;\r\n\tpadding-left: 0;\r\n\ttext-align: center;\r\n`\r\n\r\nexport const Loading = styled(QuestionContainer)`\r\n\ttext-align: center;\r\n\tcolor: #1763E6;\r\n\tfont-weight: 700;\r\n\tmargin-top: 2rem;\r\n\tbackground: none;\r\n`\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport he from 'he'\r\n\r\n// import styled component\r\nimport {\r\n\tQuestionContainer,\r\n\tNumContainer,\r\n\tQuestionNum,\r\n\tQuestion,\r\n\tChoiceButton,\r\n\tChoice,\r\n\tNextQuestion,\r\n\tAnswerCheckContainer,\r\n\tCompletedTxtContainer,\r\n\tResultContainer,\r\n\tResultText,\r\n\tScore,\r\n\tStatsContainer,\r\n\tStats,\r\n\tRestart,\r\n} from '../styles/StyledComponent'\r\n\r\nconst QuizContent = props => {\r\n\t// define state for question number, use for access specific index in quiz data coming from props\r\n\t// define state for storing score\r\n\t// define state for conditionally change disabled attribute\r\n\t// define state for game over condition\r\n\t// define state for check if the answer correct or not\r\n\r\n\tconst [questionNumber, setQuestionNumber] = useState(0)\r\n\tconst [score, setScore] = useState(0)\r\n\tconst [answerSubmitted, setAnswerSubmitted] = useState(false)\r\n\tconst [gameOver, setGameOver] = useState(false)\r\n\tconst [isCorrect, setIsCorrect] = useState(false)\r\n\r\n\t// handle answer user submitted\r\n\tconst handleAnswer = (answer) => {\r\n\t\t// console.log(el)\r\n\r\n\t\t// when user submit an answer, set disabled attribute in answer button\r\n\t\t// controlled by answerSubmitted state\r\n\t\tsetAnswerSubmitted(true)\r\n\r\n\t\t// check if the answer are correct, then add 1 to score state\r\n\t\tif (answer === props.data[questionNumber].correct_answer) {\r\n\t\t\tsetScore(score + 1)\r\n\t\t\tsetIsCorrect(true)\r\n\t\t\tconsole.log('Correct')\r\n\t\t\t// console.log(score)\r\n\t\t\t// break the function if condition are met\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// wrong answer code goes here\r\n\t\tsetIsCorrect(false)\r\n\t\tconsole.log('Incorrect Answer')\r\n\t}\r\n\r\n\t// handle when user click next question or see result\r\n\tconst nextQuestion = () => {\r\n\t\t// check if current question is the last one or not\r\n\t\t// if it's last question, set game over to true\r\n\t\tif (questionNumber === props.data.length - 1) {\r\n\t\t\tsetGameOver(true)\r\n\t\t\t// break the function if condition are met\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// add 1 to move index of the question number forward\r\n\t\tsetQuestionNumber(questionNumber + 1)\r\n\r\n\t\t// reset answerSubmitted state and isCorrect state\r\n\t\tsetAnswerSubmitted(false)\r\n\t\tsetIsCorrect(false)\r\n\t}\r\n\r\n\tconst handleRestart = () => {\r\n\t\t// reset state in quiz component\r\n\t\t// by lifting up state\r\n\t\tprops.setDiff(null)\r\n\t\tprops.setCategory(null)\r\n\t\tprops.setQuizData([])\r\n\t\tprops.setStartGame(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\t// check if props data exist, prevent error when react try to render\r\n\t\t\t\t// the component while props data doesn't exist\r\n\t\t\t\tprops.data.length !== 0 && gameOver === false && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{/* { console.log(props.data) } */}\r\n\r\n\t\t\t\t\t\t<NumContainer>\r\n\t\t\t\t\t\t\t<QuestionNum>Questions { questionNumber + 1 } / { props.data.length }</QuestionNum>\r\n\t\t\t\t\t\t</NumContainer>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/* Render Question */}\r\n\t\t\t\t\t\t<QuestionContainer>\r\n\t\t\t\t\t\t\t<Question>{ he.decode(props.data[questionNumber].question) }</Question>\r\n\t\t\t\t\t\t</QuestionContainer>\r\n\r\n\t\t\t\t\t\t{answerSubmitted && (\r\n\t\t\t\t\t\t\t<AnswerCheckContainer correct={ isCorrect }>\r\n\t\t\t\t\t\t\t\t<p>{\r\n\t\t\t\t\t\t\t\t\t\tisCorrect ? \r\n\t\t\t\t\t\t\t\t\t\t'Correct' : \r\n\t\t\t\t\t\t\t\t\t\t`Incorrect`\r\n\t\t\t\t\t\t\t\t}</p>\r\n\t\t\t\t\t\t\t</AnswerCheckContainer>\r\n\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t{/* Render Answer Choice */}\r\n\t\t\t\t\t\t{ props.data[questionNumber].answers.map((el, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={ index }>\r\n\t\t\t\t\t\t\t\t\t<ChoiceButton\r\n\t\t\t\t\t\t\t\t\t\tonClick={ () => handleAnswer(el) }\r\n\t\t\t\t\t\t\t\t\t\tdisabled={ answerSubmitted }\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{/* Answer Content */}\r\n\t\t\t\t\t\t\t\t\t\t<Choice>\r\n\t\t\t\t\t\t\t\t\t\t\t{ he.decode(el) }\r\n\t\t\t\t\t\t\t\t\t\t</Choice>\r\n\t\t\t\t\t\t\t\t\t</ChoiceButton>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)})\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t{/* Render next button when user submit answer */}\r\n\t\t\t\t\t\t{answerSubmitted && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<NextQuestion onClick={ nextQuestion }>{\r\n\t\t\t\t\t\t\t\t\tquestionNumber === props.data.length - 1 ?\r\n\t\t\t\t\t\t\t\t\t'See Result' :\r\n\t\t\t\t\t\t\t\t\t'Next Question'\r\n\t\t\t\t\t\t\t\t}</NextQuestion>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\t{/* Render result when the game is over */}\r\n\t\t\t{gameOver === true && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<CompletedTxtContainer>\r\n\t\t\t\t\t\t<p>Quiz Completed</p>\r\n\t\t\t\t\t</CompletedTxtContainer>\r\n\r\n\t\t\t\t\t<ResultContainer>\r\n\t\t\t\t\t\t<ResultText>Your Score</ResultText>\r\n\t\t\t\t\t\t<Score>{ score }</Score>\r\n\t\t\t\t\t</ResultContainer>\r\n\r\n\t\t\t\t\t<StatsContainer>\r\n\t\t\t\t\t\t<Stats correct>\r\n\t\t\t\t\t\t\t<p>Correct Answer</p>\r\n\t\t\t\t\t\t\t<p style={{ marginTop: '.5rem' }}>{ score }</p>\r\n\t\t\t\t\t\t</Stats>\r\n\t\t\t\t\t\t<Stats correct={ false }>\r\n\t\t\t\t\t\t\t<p>Incorrect Answer</p>\r\n\t\t\t\t\t\t\t<p style={{ marginTop: '.5rem' }}>{ props.data.length - score }</p>\r\n\t\t\t\t\t\t</Stats>\r\n\t\t\t\t\t</StatsContainer>\r\n\r\n\t\t\t\t\t<Restart onClick={ handleRestart }>Play Again</Restart>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nQuizContent.propTypes = {\r\n\tdata: PropTypes.array,\r\n\tsetStartGame: PropTypes.func,\r\n\tsetQuizData: PropTypes.func,\r\n\tsetCategory: PropTypes.func,\r\n\tsetDiff: PropTypes.func\r\n}\r\n\r\nexport default QuizContent\r\n","export const customStyle = {\r\n\tcontrol: (baseStyle, state) => ({\r\n\t\t...baseStyle,\r\n\t\tborderRadius: '1.75em',\r\n\t\tborderColor: state.selectProps.error ? '#FF0000' : 'hsl(0, 0%, 80%)',\r\n\t\tpadding: '0.5em',\r\n\r\n\t\t// ':hover': {\r\n\t\t// \tborderColor: '#77AAFE',\r\n\t\t// }\r\n\t}),\r\n\tplaceholder: (baseStyle) => ({\r\n\t\t...baseStyle,\r\n\t\t// color: '#004DDB',\r\n\t}),\r\n\tmenu: (baseStyle) => ({\r\n\t\t...baseStyle,\r\n\t\tborderRadius: '1.75em',\r\n\t}),\r\n\tmenuList: (baseStyle) => ({\r\n\t\t...baseStyle,\r\n\t\tborderRadius: '1.75em',\r\n\t\tpadding: '.5em'\r\n\t}),\r\n\toption: (baseStyle) => ({\r\n\t\t...baseStyle,\r\n\t\tborderRadius: '1.25em',\r\n\t\tpadding: '.75em',\r\n\t\tmargin: '.5em 0'\r\n\t}), \r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.b39a5c82.svg\";","import React, { useState } from 'react'\r\nimport Select from 'react-select'\r\nimport axios from 'axios'\r\nimport shuffle from 'lodash.shuffle'\r\n\r\n// import component\r\nimport QuizContent from './QuizContent'\r\n\r\n// import styled component\r\nimport {\r\n\tQuizTitle,\r\n\tFormLabel,\r\n\tStartButton,\r\n\tLoading,\r\n\tAnswerCheckContainer\r\n} from '../styles/StyledComponent'\r\n\r\n// import custom style for react-select\r\nimport { customStyle } from '../styles/ReactSelectStyle'\r\n\r\nimport logo from '../images/logo.svg'\r\n\r\nconst Quiz = () => {\r\n\t// define state for category, difficulty,\r\n\t// quiz data from OpenTrivia API\r\n\t// condition of the game (is the game starting or not)\r\n\t// showing error (validate form)\r\n\r\n\tconst [category, setCategory] = useState(null)\r\n\tconst [diff, setDiff] = useState(null)\r\n\tconst [quizData, setQuizData] = useState([])\r\n\tconst [startGame, setStartGame] = useState(false)\r\n\tconst [showError, setShowError] = useState(false)\r\n\tconst [showLoading, setShowLoading] = useState(false)\r\n\r\n\t// define options in react-select 'Select' component\r\n\tconst categoryOptions = [\r\n\t\t{ value: '17', label: 'Science and Nature' },\r\n\t\t{ value: '22', label: 'Geography' },\r\n\t\t{ value: '15', label: 'Video Games' }\r\n\t]\r\n\r\n\t// define options in react-select 'Select' component\r\n\tconst diffOptions = [\r\n\t\t{ value: 'easy', label: 'Easy' },\r\n\t\t{ value: 'medium', label: 'Medium' },\r\n\t\t{ value: 'hard', label: 'Hard' }\r\n\t]\r\n\r\n\t// send request to OpenTrivia API\r\n\tconst handleStart = (ev) => {\r\n\t\tev.preventDefault()\r\n\t\t// console.log(category.value)\r\n\t\t// console.log(diff.value)\r\n\r\n\t\t// check if category or diff state are null (validation)\r\n\t\tif (category === null || diff === null) {\r\n\t\t\tsetShowError(true)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// if there is data in category and diff state, continue\r\n\t\tsetShowError(false)\r\n\t\tsetShowLoading(true)\r\n\r\n\t\taxios.get(`https://opentdb.com/api.php?amount=10&category=${category.value}&difficulty=${diff.value}&type=multiple`)\r\n\t\t\t.then((res) => {\r\n\t\t\t\t// console.log(res.data.results)\r\n\t\t\t\tconst data = res.data.results\r\n\r\n\t\t\t\t// note: better to manipulate any data you want to pass to children in the parent\r\n\t\t\t\t// since the data in props are read-only\r\n\t\t\t\tsetQuizData(data.map(el => {\r\n\t\t\t\t\t// return an copy of object from resuls properties from OpenTrivia API\r\n\t\t\t\t\t// and then we can merge the correct answer and incorrect answer\r\n\t\t\t\t\t// since they're separated\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcategory: el.category,\r\n\t\t\t\t\t\ttype: el.type,\r\n            difficulty: el.difficulty,\r\n\t\t\t\t\t\tquestion: el.question,\r\n\t\t\t\t\t\tanswers: shuffle([...el.incorrect_answers, el.correct_answer]),\r\n            correct_answer: el.correct_answer,\r\n            incorrect_answers: el.incorrect_answers\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t\tsetShowLoading(false)\r\n\t\t\t})\r\n\r\n\t\t// change startGame condition to true. When user press start it means the game is starting\r\n\t\tsetStartGame(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{startGame === false && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<QuizTitle>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<img src={logo} alt=\"Logo\"/> \r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\tQuizzr\r\n\t\t\t\t\t</QuizTitle>\r\n\t\t\t\t\t{/*\r\n\t\t\t\t\t{ console.log(category) }\r\n\t\t\t\t\t{ console.log(diff) }\r\n\t\t\t\t\tconsole.log(quizData) */\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t<form onSubmit={ handleStart }>\r\n\t\t\t\t\t\t<FormLabel>Choose Category</FormLabel>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tdefaultValue={ category }\r\n\t\t\t\t\t\t\tonChange={ setCategory }\r\n\t\t\t\t\t\t\toptions={ categoryOptions }\r\n\t\t\t\t\t\t\tstyles={ customStyle }\r\n\t\t\t\t\t\t\terror={ showError }\r\n\t\t\t\t\t\t/>\r\n\t\t\r\n\t\t\t\t\t\t<FormLabel>Choose Difficulty</FormLabel>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tdefaultValue={ diff }\r\n\t\t\t\t\t\t\tonChange= { setDiff }\r\n\t\t\t\t\t\t\toptions={ diffOptions }\r\n\t\t\t\t\t\t\tstyles={ customStyle }\r\n\t\t\t\t\t\t\terror={ showError }\r\n\t\t\t\t\t\t/>\r\n\t\t\r\n\t\t\t\t\t\t<StartButton>Start Quiz</StartButton>\r\n\t\t\t\t\t</form>\r\n\t\t\r\n\t\t\t\t\t{showError && (\r\n\t\t\t\t\t\t<AnswerCheckContainer style={{ marginTop: '2rem' }}>Category and Difficulty <br /> must be filled</AnswerCheckContainer>\r\n\t\t\t\t\t)}\r\n\t\t\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t{showLoading && (\r\n\t\t\t\t<Loading>Generating Questions ...</Loading>\r\n\t\t\t)}\r\n\r\n\t\t\t{ // check if start game button is pressed, prevent error\r\n\t\t\t\t// when react try to render QuizContent component\r\n\t\t\t\t// while props data doesn't exist\r\n\t\t\t\tstartGame !== false && (\r\n\t\t\t\t\t<QuizContent\r\n\t\t\t\t\t\tdata={ quizData }\r\n\t\t\t\t\t\tsetStartGame={ setStartGame }\r\n\t\t\t\t\t\tsetQuizData={ setQuizData }\r\n\t\t\t\t\t\tsetCategory={ setCategory }\r\n\t\t\t\t\t\tsetDiff={ setDiff }\r\n\t\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Quiz\r\n","import './App.css';\nimport Quiz from './components/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@fontsource/quicksand\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}